# Level Up
# Вы играете в ролевую игру. В настоящее время общее количество ваших очков
# опыта (XP) равно опыту. Чтобы достичь следующего уровня, ваш XP должен быть
# как минимум на пороге. Если вы убьете монстра перед собой, вы получите
# больше очков опыта в размере награды.
# # Учитывая значения опыта, порога и награды, проверьте, достигнете ли вы
# следующего уровня после убийства монстра.
# Пример:
# Для experience = 10, threshold = 15, и reward = 5, результат должен быть:
# true
# Для experience = 10, threshold = 15, и reward = 4, результат должен быть:
# false


def level_up(experience: int, threshold: int, reward: int) -> bool:
    return experience + reward >= threshold


print(level_up(10, 15, 5))  # True
print(level_up(10, 15, 4))  # False

# Time
# Однажды ночью вы отправляетесь кататься на мотоцикле. В 00:00 вы запускаете
# двигатель, и встроенный таймер автоматически начинает отсчитывать
# продолжительность вашей поездки в минутах. Вы отправляетесь исследовать
# окрестности. Когда вы, наконец, решаете вернуться назад, вы понимаете, что
# есть вероятность, что мосты на вашем пути домой разведены, и вы останетесь в
# затруднительном положении! К сожалению, у вас нет с собой часов и вы не
# знаете, который час. Благодаря таймеру мотоцикла вы знаете только то, что с
# 00:00 прошло n минут.
# Используя таймер мотоцикла, рассчитайте текущее время. Возвращает ответ в
# виде суммы цифр, которую покажет цифровой таймер в формате чч:мм.
# Пример:
# Для n = 240, результат должен быть: 4
# 240 минут прошло, текущее время 04:00. Сумма чисел: 0 + 4 + 0 + 0 = 4,
# это и есть ответ.
# Для n = 808, результат должен быть: 14
# 808 минут прошло, и это означает что сейчас 13:28, так что ответ должен быть
# 1 + 3 + 2 + 8 = 14.


def motor_time(n: int) -> int:
    # Количество прошедших часов с учётом суток
    hours = (n // 60) % 24
    # Остаток минут
    minutes = n % 60
    # Формируем строку "HHMM" с ведущими нулями
    time_str = f"{hours:02d}{minutes:02d}"
    # Суммируем все цифры
    return sum(int(d) for d in time_str)


print(motor_time(240))  # 4   (04:00 -> 0+4+0+0)
print(motor_time(808))  # 14  (13:28 -> 1+3+2+8)

# Time converter
# Ваша задача - переконвертировать время из 24-часового формата в 12-часовой,
# используя следующие правила: выходной формат должен быть 'чч:мм a.m.' (для
# часов до полудня) или 'чч:мм p.m.' (для часов после полудня), если часы
# меньше 10 - не пишите '0' перед ними. Например: '9:05 a.m.'
# Пример:
# '12:30' == '12:30 p.m.'
# '09:00' == '9:00 a.m.'
# '23:15' == '11:15 p.m.'
# '00:00' == '12:00 a.m.'


def time_converter(hours_string: str) -> str:
    h, m = map(int, hours_string.split(':'))
    suffix = ['a.m.', 'p.m.'][h >= 12]
    hour_12 = (h % 12) or 12
    minute_str = f'{m:02d}'
    return f'{hour_12}:{minute_str} {suffix}'


print(time_converter('12:30'))
print(time_converter('09:00'))
print(time_converter('23:15'))
print(time_converter('00:00'))
